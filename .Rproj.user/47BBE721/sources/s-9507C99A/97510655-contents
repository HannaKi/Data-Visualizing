---
title: "Data Visualization Notes"
author: "Kieran Healy"
date: "2019-01-02"
output: html_document
---
   
## Data Visualization Notes

This is a starter RMarkdown template to accompany *Data Visualization* (Princeton University Press, 2019). You can use it to take notes, write your code, and produce a good-looking, reproducible document that records the work you have done. At the very top of the file is a section of *metadata*, or information about what the file is and what it does. The metadata is delimited by three dashes at the start and another three at the end. You should change the title, author, and date to the values that suit you. Keep the `output` line as it is for now, however. Each line in the metadata has a structure. First the *key* ("title", "author", etc), then a colon, and then the *value* associated with the key.  

## This is an RMarkdown File

Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. A *code chunk* is a specially delimited section of the file. You can add one by moving the cursor to a blank line choosing Code > Insert Chunk from the RStudio menu. When you do, an empty chunk will appear:

```{r}
## Onpa hienoa!

```

```{r}

```

Code chunks are delimited by three backticks (found to the left of the 1 key on US and UK keyboards) at the start and end. The opening backticks also have a pair of braces and the letter `r`, to indicate what language the chunk is written in. You write your code inside the code chunks. Write your notes and other material around them, as here. 

## Before you Begin

To install the tidyverse, make sure you have an Internet connection. Then *manually* run the code in the chunk below. If you knit the document if will be skipped. We do this because you only need to install these packages once, not every time you run this file. Either knit the chunk using the little green "play" arrow to the right of the chunk area, or copy and paste the text into the console window.

```{r install, eval = FALSE}

## This code will not be evaluated automatically.
## (Notice the eval = FALSE declaration in the options section of the
## code chunk)

my_packages <- c("tidyverse", "broom", "coefplot", "cowplot",
                 "gapminder", "GGally", "ggrepel", "ggridges", "gridExtra",
                 "here", "interplot", "margins", "maps", "mapproj",
                 "mapdata", "MASS", "quantreg", "rlang", "scales",
                 "survey", "srvyr", "viridis", "viridisLite", "devtools")

install.packages(my_packages, repos = "http://cran.rstudio.com")

```

## Set Up Your Project and Load Libraries

To begin we must load some libraries we will be using. If we do not load them, R will not be able to find the functions contained in these libraries. The tidyverse includes ggplot and other tools. We also load the socviz and gapminder libraries.

```{r setup, include=FALSE}

## By defult, show code for all chunks in the knitted document,
## as well as the output. To override for a particular chunk
## use echo = FALSE in its options.
knitr::opts_chunk$set(echo = TRUE) 

## Set the default size of figures
knitr::opts_chunk$set(fig.width=8, fig.height=5)  

## Load the libraries we will be using
library(gapminder)
library(here)
library(socviz)
library(tidyverse)

```

Notice that here, the braces at the start of the code chunk have some additional options set in them. There is the language, `r`, as before. This is required. Then there is the word `setup`, which is a label for your code chunk. Labels are useful to briefly say what the chunk does. Label names must be unique (no two chunks in the same document can have the same label) and cannot contain spaces. Then, after the comma, an option is set: `include=FALSE`. This tells R to run this code but not to include the output in the final document. 
```{r}
# eli edellisen kappaleen yläpuolella on
# koodia, jota ei tulosteta html-tiedostoon
```


When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r look}
gapminder
```

The remainder of this document contains the chapter headings for the book, and an empty code chunk in each section to get you started. Try knitting this document now by clicking the "Knit" button in the RStudio toolbar, or choosing File > Knit Document from the RStudio menu.

## Look at Data

```{r}

```


## Get Started

Muistiinpanoja: 

- "it’s better to think of the data and code as what’s real, together with the text you write."

- "The reality for most of us is that the person who will most want to easily reproduce your work is you, six months or a year from now."

- "While a script file can keep comments and code together, it loses *the connection between code and its output*, such as the figure we want to produce. But there is a better alternative: we can write our notes using RMarkdown."

```{r}
# Ctrl+Alt+I Windowsilla antaa tällaisen koodipalan. (Entä Linux?)
```


```{r}

```


## Make a Plot

```{r}
summary(gapminder)
```


Katsotaan datan muuttujien nimet

```{r}
colnames(gapminder)
```

Niistä saadaan elementit kuvaajan piirtämiseen

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp,
                          size = pop,
                          color = continent)) +
                          geom_point() +
                          coord_cartesian() +
                          scale_x_log10() +
                          labs(x = "log GDP", y = "Life expectancy",
                          title = "kuvaaja")

# piirrä tulostamalla "p"
p
```


"An aesthetic mapping **aes** specifies that a **variable** will be expressed by one of the available visual elements, such as size, or color, or shape, and so on."

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp,
                          color = "purple"))+
  geom_point() +
    geom_smooth(method = "loess") +
    scale_x_log10() + 
    labs(title = "aes-funktioon annettu värimäärittely VÄÄRIN")

p

```

"The aes() function is for mappings only. Do not use it to change properties to a particular value."!!!

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + geom_point(color = "purple") +
    geom_smooth(method = "loess") +
    scale_x_log10() + 
    labs(title = "Värin voi määrittää geom-funktiolle mutta se ei tuo tässä lisää tietoa")
```

ggplot koostuu kerroksista, jossa jokainen kerroksen funktio voi käyttää omia parametrejaan:

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp)) 
p + geom_point(alpha = 0.3) +
    geom_smooth(color = "orange", se = FALSE, size = 8, method = "lm") +
    scale_x_log10()
```

- "'alpha' is an aesthetic property that points (and some other plot elements) have, and to which variables can be mapped"

- Choosing an intermediate alpha-value can be useful when there is a lot of overlapping data to plot

```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp))

p+  geom_point(alpha = 0.3) +
    geom_smooth(method = "gam") +
    scale_x_log10(labels = scales::dollar) +
    labs(x = "GDP Per Capita", y = "Life Expectancy in Years",
         title = "Economic Growth and Life Expectancy",
         subtitle = "Data points are country-years",
         caption = "Source: Gapminder.")
```

Huomaa kuvaajassa yllä hieno otsikointi ja lähdeviitteet, jotka on tehty labs-funktiolla. Akselien asteikon $-merkki tulee kuitenkin scale-funktion parametrina

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp,
                          color = continent,
                          fill = continent))
p + geom_point() +
    geom_smooth(method = "loess") +
    scale_x_log10()
```
- Kun ggplotille annetaan piirrettäväksi uusi muuttuja, muuttuja "periytyy" kaikille lisämäärittelyjä tekeville funktioille. Siksi kaikille conitnent-muuttujille tulee oma regressiokäyrä. 

- huomaa fill, joka värittää täytettävissä olevat alat

```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_point(mapping = aes(color = continent)) +
    geom_smooth(method = "loess") +
    scale_x_log10()
```

Jos geom_funktiolle määrittää erikseen, mitä muuttujia sen avulla haluaa piirtää, periytymistä voi rajoittaa.

Myös jatkuva muuttuja voi määrätä värin

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
p + geom_point(mapping = aes(color = log(pop))) +
    scale_x_log10()
```

Kuvaajan tallenteminen toimii here-funktion avulla

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp)) +
    geom_point(mapping = aes(color = log(pop))) +
    scale_x_log10()

ggsave(here("output", "figures", "testikuvaaja.png"), plot = p)
```

# Kokeiluja 

```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_point(mapping = aes(color = continent)) +
    geom_smooth(method = "loess") +
    scale_x_log10() + 
    labs(title = "Alkuperäinen kuvaaja")
```
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) +
    scale_x_log10() + 
    labs(title = "geom_smooth ennen geom_pointia")
```
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = pop, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) +
    scale_x_log10() + 
    labs(title = "Elinaika suhteessa populaatioon")
```
Tulkinta: Elinajanennuste on alhaisin Afrikassa. Elinajanennuste on keskimäärin hieman korkeampi maissa, joissa on suuri väestö.

Kokeiluja akseleilla

```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) +
    scale_y_log10() 
```

```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) +
    scale_x_sqrt() 
```
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) +
    scale_x_reverse() 
```
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) 
```
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = year)) +
    scale_x_log10() + 
    labs(title="värimääreenä vuosi eikä manner")
```
```{r}
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = factor(year))) +
    scale_x_log10() + 
    labs(title="värimääreenä vuosi eikä manner HUOM! factor(year)!!!!")
```

```{r}
gapminder2 <- filter(gapminder, year == 2007)
p <- ggplot(data = gapminder2, mapping = aes(x = gdpPercap, y = lifeExp))
p + geom_smooth(method = "loess") +
    geom_point(mapping = aes(color = continent)) +
    scale_x_log10() 
```


## Show the Right Numbers
Allaolevassa kuvaajassa, jossa piirretään kahta jatkuvaa muuttujaa, muuttujissa itsessään ei ole ryhmittelyä (kuten manner tai maa). Tämän vuoksi ggplotille kerrotaan, että jokainen vuosi kuuluu jollekkin maalle, eli aes(group=country). Näin jokaiselle maalle piirtyy oma viivansa.

```{r}
p <- ggplot(data = gapminder,
            mapping = aes(x = year,
                          y = gdpPercap))
p + geom_line(aes(group=country)) 
```
# Ruudukot tiedon esittämisen apuna

Fasetilla voidaan jakaa kuva useampaan 

```{r}
p <- ggplot(data = gapminder, mapping = aes(x = year, y = gdpPercap))

p + geom_line(aes(group = country)) + facet_wrap(~ continent)
```


## Graph Tables, Make Labels, Add Notes

```{r}

```

## Work with Models

```{r}

```

## Draw Maps

```{r}

```


## Refine your Plots

```{r}

```


